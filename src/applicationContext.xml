<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
           http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <constructor-arg value="yuan"/>
    </bean>

    <!--
    将数据源注入到jdbcTemplate中去
    让JdbcTemplate 可以通过@Autowired 注解加到 dao的实现类中
    -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate"
          abstract="false"
          lazy-init="false" autowire="default">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--
        整合Mybatis 到Spring中
    -->

    <!--<mybatis:scan base-package="com.yuan.dao"/>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <value>
                    classpath*:com/mapping/**/*Mapping.xml
                </value>
            </list>
        </property>
    </bean>

    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!--
    配置视图层
    -->
    <!-- <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
         <property name="basenames">
             <list>
                 <value>view</value>
             </list>
         </property>
         <property name="defaultParentView" value="login"/>
     </bean>-->

    <!--上面的做法很麻烦，于是就有了下面这个类-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
        <property name="order" value="2"/>
    </bean>

    <!--
    配制SpringMVC
    -->

    <!--扫包-->
    <context:component-scan base-package="com.yuan"/>

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!-- 配置事务 -->
    <!--声明事务管理者-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
            通过一个类将任意一个类做成一个切面。
            比如：

   <aop:aspectj-autoproxy/>

                <bean id="myadivice" class="com.pingan.pojo.Pojo"></bean>
                &lt;!&ndash; 声明顶级元素,且自动代理 &ndash;&gt;
        <aop:config>
            <aop:pointcut id="personCut" expression="execution(* com.pingan..Person.*(..))"/> &lt;!&ndash;声明一个全局切点&ndash;&gt;
            &lt;!&ndash; 声明一个切面 &ndash;&gt;
            <aop:aspect ref="myadivice">

                &lt;!&ndash; 声明前通知 &ndash;&gt;
                <aop:around method="around" pointcut-ref="personCut"/>
                <aop:before method="before" pointcut-ref="personCut"></aop:before>
                <aop:after method="after" pointcut="execution(* com.pingan.dto.Person.say*(..))"/>
                <aop:after-returning method="after" pointcut-ref="personCut"/>
                <aop:after-throwing method="after" pointcut-ref="personCut"/>

            </aop:aspect>
        </aop:config>

        public class Pojo {

        public void before(){
            System.err.println("方法在执行前运行");
        }
        public void after(){
            System.err.println("方法在执行后运行");
        }

        public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
            System.err.println("around 之前");
            Object obj = joinPoint.proceed();
            System.err.println("around 之后");
            return obj;
        }

    }


        -->
    <aop:aspectj-autoproxy/>


    <!--
        支持用在service接口上用注解来实现事务。

        （注意：在使用注解来做事务的时候一定要声明Service的接口，在接口方法上使用 @Transactional(propagation = Propagation.REQUIRED) 来实现）
            <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <constructor-arg value="yuan"/>
    </bean>

    <bean id="action" class="com.annotation.biz.Action">
        <property name="service">
            <bean class="com.annotation.biz.ServiceImpl">
                <property name="daoimpl">
                    <bean class="com.annotation.biz.DaoImpl">
                        <property name="dataSource" ref="dataSource"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="transtation" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transtation"/>


public class Action {
    private Service service;

    public Service getService() {
        return service;
    }

    public void setService(Service service) {
        this.service = service;
    }

    public void run(){
        service.mysave();
        service.myupdate();
    }
}

public interface Service {
    @Transactional(propagation = Propagation.REQUIRED)
    void mysave();
    @Transactional(propagation = Propagation.REQUIRED)
    void myupdate();
}



public class ServiceImpl implements Service {
    private DaoImpl daoimpl;

    public DaoImpl getDaoimpl() {
        return daoimpl;
    }

    public void setDaoimpl(DaoImpl daoimpl) {
        this.daoimpl = daoimpl;
    }

    @Override
    public void mysave() {
        daoimpl.save1();
        daoimpl.save2();
    }

    @Override
    public void myupdate() {
        daoimpl.update1();
        daoimpl.update2();
    }
}


public class DaoImpl extends JdbcDaoSupport {

    public void save1() {
        JdbcTemplate jt = this.getJdbcTemplate();
        jt.execute("insert into yuan VALUES ('java')");
    }
    public void save2() {
        JdbcTemplate jt = this.getJdbcTemplate();
        jt.execute("insert into yuan VALUES ('javascript)");
    }

    public void update1() {
        JdbcTemplate jt = this.getJdbcTemplate();
        jt.execute("UPDATE yuan SET username = 'abc' WHERE username = 'java'");
    }
    public void update2() {
        JdbcTemplate jt = this.getJdbcTemplate();
        jt.execute("UPDATE yuan SET username = 'jquery' WHERE username = 'javascript");
    }
}


    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--声明一个通知-->
    <tx:advice id="interceptor" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--声明切面-->
    <aop:config>
        <aop:advisor advice-ref="interceptor" pointcut="execution(* com..*Service*.*(..))"/>
    </aop:config>

    <!-- 加载属性文件 用${属性名} 来获取-->
    <context:property-placeholder location="classpath*:*.properties"/>

  <!--  <bean id="properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:*.properties</value>
            </list>
        </property>
    </bean>-->

    <!-- 加载属性文件 用#{id['属性名']} 来获取-->
    <bean id="propertiesConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:valueTest.properties</value>
            </list>
        </property>
    </bean>
</beans>
